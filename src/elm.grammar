" whitespace : '\n' | '\t' | ' '; "
        " comment    : \"--\" /[^\n]*/; "
        " true       : \"True\"; "
        " false      : \"False\"; "
        " number     : /[0-9]+/; "
        " float      : /[0-9]+\\.[0-9]+/; "
        " char       : /'.'/; "
        " string     : /\"(\\\\.|[^\"])*\"/; "
        // " multistr   : \"\\"\\"\\"\" /.*/ \"\\"\\"\\"\"; "
        " literal    : <true> "
        "            | <false> "
        "            | <number> "
        "            | <float> "
        "            | <char> "
        "            | <string>; "
        " variable   : /[a-z][a-zA-Z]*/; "
        " value      : <literal> | <variable>; "
        " expression : <variable> (<expression>)+ "
        "            | '(' <expression> ')' "
        "            | <value>; "
        " type       : /[A-Z][A-Za-z]*/; "
        " customtype : \"type\" ' '+  <type>; "
        " typealias  : \"type alias\" <type> '=' <type>; "
        " valuedecl  : <variable> '=' (<comment>)*  <expression>; "
        " typedecl   : <customtype> | <typealias>; "
        " declaration : (<valuedecl> | <typedecl>); "
        

        //" module     : \"module\" <type> \"exposing\" '(' <variable> | \"..\" ')' <expression>; "
        " elm        : /^/ <whitespace>* (<comment> | <declaration>) <whitespace>+ (<comment> | <declaration>)* <whitespace>* /$/; "
